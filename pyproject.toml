[project]
name = "partial_cythonization"
version = "0.1.0"
description = "A project demonstrating partial Cythonization."
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [{ name = "Frederic De Groef", email = "f.degroef@gmail.com"}]

dependencies = [
    "click>=7",
    "cython>=0.29.0",
    "setuptools>=42.0.0",
]

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov",
    "numba",
    "numpy>1.24.4",
]
lint = [
    "ruff",
]

[tool.black]
line-length = 120

[tool.ruff]
line-length = 120


[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

include = [
    "partial_cythonization/*",
    "tests/*"
]
omit = ["project_to_obfuscate/*"]


[tool.pixi.environments]
test = ["test"]
lint = ["lint"]

[tool.pixi.workspace]
name = "partial_cythonization"
channels = ["conda-forge"]
platforms = ["osx-arm64", "win-64", "linux-64"]

[tool.pixi.pypi-dependencies]
partial_cythonization = { path = ".", editable = true }

[tool.pixi.tasks]

[tool.pixi.feature.test.tasks]
test = "pytest tests -v"

[tool.pixi.feature.lint.tasks]
check = "ruff check ."
fix = "ruff check . --fix"
format = "ruff format --check ."
fd = "ruff format --check --diff ."


[tool.pixi.dependencies]
cython = "*"
click = "8.2.*"
setuptools = "*"

[tool.pixi.feature.test.dependencies]
pytest = "*"
pytest-cov = "*"
numba = "*"

[tool.pixi.feature.lint.dependencies]
ruff = "*"
