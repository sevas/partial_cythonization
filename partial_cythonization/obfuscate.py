"""Main module."""
import subprocess
import shutil
import sysconfig
from pathlib import Path
import fnmatch
from typing import List

SETUP_PY = """
# This file was generated by partial_cythonization.
from pathlib import Path
from setuptools import setup
from Cython.Build import cythonize

THIS_DIR = Path(__file__).parent
obfuscate_list_file = Path(THIS_DIR / "_obfuscate_list.txt")

obfuscate_list = obfuscate_list_file.read_text().split("\\n")

setup(
    name='Hello world app',
    ext_modules=cythonize(obfuscate_list)
)
"""


def should_include(fp: Path, include_list: List[str]) -> bool:
    for pat in include_list:
        if fnmatch.fnmatch(fp, pat):
            return True
    return False


def should_exclude(fp: Path, exclude_list: List[str]) -> bool:
    for pat in exclude_list:
        if fnmatch.fnmatch(fp, pat):
            return True
    return False


def detect_numba_usage(txt):
    return "import numba" in txt or "from numba" in txt


def obfuscate_package(
    src: str | Path,
    dest: str | Path,
    compile_all: bool = False,
    clean: bool = False,
    include_data=None,
    always_exclude=None,
):
    """Obfuscate a python package.

    Parameters
    ----------
    src
        Path to the source package.
    dest
        Path to the destination package.
    compile_all
        Whether to compile all python files found in the source package
    clean
        Whether to clean the cythonized files from the source package after obfuscation
    """
    src = Path(src)
    dest = Path(dest)
    shutil.rmtree(dest, ignore_errors=True)
    dest.mkdir(exist_ok=True, parents=True)

    if include_data is None:
        include_data = []

    if always_exclude is None:
        always_exclude = []

    src_pkg_dir = src.parent

    included_files = []
    ignored_files = []

    for fp in src.rglob("*"):
        if fp.is_dir() or fp.suffix == ".pyc":
            continue

        if should_exclude(fp.relative_to(src_pkg_dir), exclude_list=always_exclude):
            continue

        elif "experimental" in str(fp):
            ignored_files.append(fp)
        elif fp.suffix == ".py":
            included_files.append(fp)
        elif should_include(fp.relative_to(src_pkg_dir), include_list=include_data):
            included_files.append(fp)
        else:
            ignored_files.append(fp)

    # no need to cythonize init.py files
    py_modules = [each for each in included_files if each.suffix == ".py" and each.name != "__init__.py"]

    # detect files using numba and remove them from the list of module to cythonize
    for each in py_modules:
        txt = each.read_text()
        if detect_numba_usage(txt):
            print(f"!!! File {each} uses the numba jit compiler, and cannot be cythonized.")
            py_modules.remove(each)
            included_files.append(each)

    print("--- Ignored files: ", ignored_files)
    print("--- Collecting files to obfuscate...")
    to_obfuscate = []
    for mod in py_modules:
        # print(f"--- Detecting if {mod} needs to be cythonized")
        if compile_all:
            to_obfuscate.append(str(mod.relative_to(src_pkg_dir)))
        else:
            try:
                txt = mod.read_text().split("\n")
            except UnicodeDecodeError:
                txt_b = mod.read_bytes()

                txt = txt_b.decode("utf-8", "ignore")

            if txt[0].startswith("# obfuscate_with_cython: True"):
                to_obfuscate.append(str(mod.relative_to(src_pkg_dir)))
    print("--- Found: ", to_obfuscate)

    if not to_obfuscate:
        print("--- No files to obfuscate.")
        return

    (src.parent / "_obfuscate_list.txt").write_text("\n".join(to_obfuscate))
    (src.parent / "setup_generated.py").write_text(SETUP_PY)

    cmd = ["python", "setup_generated.py", "build_ext", "--inplace"]
    print("--- Running cython on selected files")
    print(f"---     With command: {' '.join(cmd)}")
    print(f"---     In directory: {src_pkg_dir.absolute()}")

    subprocess.run(cmd, cwd=str(src_pkg_dir))
    print("--- Done.")

    print("--- Copying package files with obfuscated modules")
    ext_suffix = sysconfig.get_config_var("EXT_SUFFIX")
    to_clean = []
    for fp in included_files:
        if str(fp.relative_to(src_pkg_dir)) in to_obfuscate:
            # copy compiled file
            matching_ext = list(fp.parent.glob(fp.stem + ext_suffix))
            if matching_ext:
                dest_fp = dest / matching_ext[0].relative_to(src_pkg_dir)
                dest_fp.parent.mkdir(exist_ok=True, parents=True)
                shutil.copy(matching_ext[0], dest_fp)
                to_clean.append(matching_ext[0])
            else:
                raise FileNotFoundError(
                    f"Could not find compiled file for {fp}. This means that cython failed to compile the file."
                )
        else:
            dest_fp = dest / fp.relative_to(src_pkg_dir)
            dest_fp.parent.mkdir(exist_ok=True, parents=True)
            shutil.copy(fp, dest_fp)

    shutil.copytree(src.parent / "tests", dest / "tests")

    if clean:
        for each in to_clean:
            c_file_name = each.name.replace(ext_suffix, ".c")
            print(f"--- Cleaning up: {each} and {c_file_name}")
            each.unlink()
            (each.parent / c_file_name).unlink()
